generator client {
  provider = "prisma-client-js"
}



datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String 
    providerAccountId String
    refresh_token     String? @db.Text 
    access_token      String? @db.Text 
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text 
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
    @@unique([provider, providerAccountId])
    @@index([userId])
}



model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@index([userId])
}
model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    image         String?
    role          USER_ROLE @default(USER)
    active        Boolean   @default(true)
    seller        Boolean   @default(false)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    stores       Store[]
}



model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    @@unique([identifier, token])
}


enum USER_ROLE{
  ADMIN
  USER
}

model Store{
  id            String @id @default(cuid())
  name          String
  description   String? @db.Text
  image         StoreImage? @relation(fields: [storeImageId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  products      Product[]
  storeImageId  String? 
  @@index([userId])
  @@index([storeImageId])



}
model StoreImage {
  id      String @id @default(cuid())
  name   String
  url   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stores   Store[]
}

model Product{
  id            String @id @default(cuid())
  name          String
  description   String? @db.Text
  price         Int
  image         ProductImage[]
  catergory     PRODUCT_CATEGORY @default(SKATEBOARD)
  quantity      Int     @default(1)
  inventory     Int     @default(1)
  rating        Int     @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  store         Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId       String
  @@index([storeId])
}


model ProductImage {
  id         String @id @default(cuid())
  name       String 
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product? @relation(fields: [productId], references: [id])
  productId  String?

  @@index([productId])
}




enum PRODUCT_CATEGORY{
  SKATEBOARD
  CLOTHING
  SHOES
  ACCESSORIES
}







// Here's a breakdown of the fields:

// provider: This field represents the third-party authentication provider, such as Google, Facebook, or Twitter.
// providerAccountId: This field represents the unique identifier assigned to the user by the third-party authentication provider.
// The combination of provider and providerAccountId uniquely identifies an account for a user on a specific third-party authentication provider. For example, a user may have a Google account with a providerAccountId of "12345" and a Facebook account with a providerAccountId of "67890". The @@unique([provider, providerAccountId]) constraint ensures that these accounts are treated as distinct and that no duplicate accounts are created for the same user on the same provider.
// refresh_token: This field represents the refresh token that is used to obtain a renewed access token. When an access token expires, the client can use the refresh token to get a new access token without requiring the user to go through the authentication flow again. This is particularly useful for maintaining a session or connection without interrupting the user experience.

// This configuration tells Prisma to generate a client library using the prisma-client-js provider. Once the client library is generated, you can use it in your JavaScript or TypeScript code to interact with your database.